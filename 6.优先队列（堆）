优先队列的声明
#ifndef _BinHeap_H

struct HeapStruct;
typedef struct HeapStruct *PriorityQueue;

PriorityQueue Initialize( int MaxElemnets );
void Destroy( PriorityQueue H );
void makeEmpty( PriorityQueue H );
void Insert( ElementType X,PriorityQueue H );
ElementType DeleteMin( PriorityQueue H );
ElementType FindMin( PriorityQueue H );
int IsEmpty( PriorityQueue H );
int IsFull( PriorityQueue H );

#endif


/*Place in implementation file*/
struct HeapStruct
{
    int Capacity;
    int size;
    ElementType *Element;
};
PriorityQueue
Initialize(int MaxElements)
{
    PriorityQueue H;
    
    if(MaxElements<MinPQSize)
        Error("PriorityQueue queue size is too small")
        
    H = malloc(sizeof(struct HeapStruct));
    if(H==NULL)
        FatalError("Out of space!!!");
        
    /*Allocate the array plus one extra for sentinel*/
    H->Elements = malloc((MaxElement+1) *sizeof(Elementype));
    if(H==NULL)
        FatalError("Out of space!!!");
        
    H->Capacity = MaxElements;
    H->Size = 0;
    H->Element[0] = MinData;
    
    return H;
}

插入到一个二叉堆的过程
void
Insert( ElementType X,PriorityQueue H )
{
    int i;
    
    if(IsFull(H))
    {
        Error("Priority queue is full");
        return;
    }
    
    for( i = ++H->Size; H->Elements[i/2] > X; i /= 2)
        H->Elements[i] = H->Element[i/2];
    H->Elements[i] = x;
}

在二叉堆中执行DeleteMin的函数
ElementType
DeleteMin(Priority H)
{
    int i,Child;
    ElementType Minelement,LastElement;
    
    if(IsEmpty(H))
    {
        Error("Priority queue is empty");
        return H->Element[0];
    }
    MinElement = H->Elements[1];
    LastElement = H->Elements[ H->Size-- ];
    
    for( i=1;i*2<=H->Size;i=Child)
    {
        /*Find smaller child*/
        Child = i*2;
        if( Child != H->Size && H->Elements[Child+1]<H->Elements[Child])
            Child++;
            
        /*Percolate one level*/
        if(LastElement > H->Elements[Child])
            H->Element[i] = H->Elements[Child];
        else
            break;
      }
      H->Elements[i] = LastElement;
      return MinElement;
}


左式堆类型声明
#ifndef _LeftHeap_H

struct TreeNode;
typedef struct TreeNode *PriorityQueue;

/*Minimal set of priority queue operations*/
/*Note that nodes will be shared among several*/
/*leftist heaps after a merge;the user must*/
/*make sure to not use the old leftist heaps*/

PriorityQueue Initialize(void);
ElementType FindMin(PriorityQueue H);
int IsEmpty(PriorityQueue H);
PriorityQueue Merge(PriorityQueue H1;PriorityQueue H2);

#define Insert(X,H)(H=Insert1((x),H))
/*DeleteMin macro is left as an exercise*/

PriorityQueue Insert1(ElementType X,PriorityQueue H);
priorityQueue DeleteMin1(PriorityQueue H);

#endif



/*Place in implementation file*/
struct TreeNode
{
    ElementType   Element;
    PriorityQueue Left;
    PriorityQueue Right;
    int           Np1;
};

合并左式堆的驱动程序
PriorityQueue
Merge(PriorityQueue H1;PriorityQueue H2);
{
    if( H1 == NULL)
        return H2;
    if( H2 == NULL)
        return H1;
    if( H1->Element < H2->Element )
        return Merge1(H1,H2);
    else
        return Merge1(H2,H1);
}

合并左式堆的实际例程
static PriorityQueue
Merge1(PriorityQueue H1;PriorityQueue H2);
{
    if( H1->Left == NULL) /*Single node*/
        H1->Left = H2;
    else
    {
        H1->Right = Merge(H1->Right,H2);
        if(H1->Left->Np1 < H1->Right->Np1)
            SwapChildren(H1);
            
        H1->Np1 = H1->Right->Np1 + 1;
    }
    return H1;
}

左式堆的插入例程
PriorityQueue
Insert1( ElementType X, PriorityQueue H)
{
    PriorityQueue SingLeNode;
    
    SingleNode = malloc( sizeof( struct TreeNode ) );
    if( SingleNode == NULL )
        FatalError("Out of space!!!");
    else
    {
        SingleNode->Element = X; SingleNode->Np1 = 0;
        SingleNode->Left =  SingleNode->Right = NULL;
        H = Merge( SingleNode, H );
    }
    return H;
}

左式堆的例程DeleteMin例程
/*DeleteMin1 returns the new tree;*/
/*To get the minimum,use FindMin*/
/*This is for convenience*/

PriorityQueue
DeteleMin1( PriorityQueue H )
{
    PriorityQueue LeftHeap,RightHeap;
    
    if( IsEmpty( H ) )
    {
        Error("Priority queue is empty")
        return H;
    }
    
    LeftHeap = H->Left;
    RightHeap = H->Right;
    free(H);
    return Merge(LeftHeap,RightHeap);
}





二项队列类型声明
typedef struct BinNode *Position;
typedef struct Collection *BinQueue;

struct BinNode
{
    ElementType Element;
    Position    LeftChild;
    Position    NextSibling;
};

struct Collection
{
    int CurrentSize;
    BinTree TheTrees[ MaxTrees ];
};

合并同样大小的两棵树的例程
/*Return the result of merging equal-sized T1 and T2*/
BinTree
CombineTrees( BinTree T1,BinTree T2 )
{
    if( T1->Element > T2->Element )
        return CombineTrees( T2, T1 );
    T2->NextSibling = T1->LeftChild;
    T1->LeftChild = T2;
    return T1;
}

合并两个优先队列的例程
/*Merge two binomial queues*/
/*Not optimized for early termination*/
/*H1 contains merged result*/

BinQueue
Merge(BinQueue H1,BinQueue H2)
{
    BinTree T1,T2,Carry = NULL;
    int i,j;
    
    if(H1->CurrentSize + H2->CurrentSize > Capacity)
        Error("Merge would exceed capacity");
        
    H1->CurrentSize += H2->CurrentSize;
    for( i=0,j=1; j <= H1->CurrentSize; i++,j*=2)
    {
        T1 = H1->TheTrees[i];T2 = H2->TheTree[i];
        
        switch( !!T1 + 2 * !!T2 + 4 * !!Carry )
        {
            case 0：/*No trees*/
            case 1：/*Only H1*/
                break;
            case 2:/*Only H2*/
                H1->TheTrees[i] = T2;
                H2->TheTrees[i] = NULL;
                break;
            case 3:/*H1 and H2*/
                Carry = CombineTrees(T1,T2);
                H1->TheTrees[i] = H2->TheTrees[i] = NULL;
                break;
            case 4:/*Only Carry*/
                H1->TheTrees[i] = Carry;
                Carry =NULL;
                break;
            case 5:/*H1 and Carry*/
                Carry = CombineTrees(T1,Carry);
                H1->TheTrees[i] = NULL;
                break;
            case 6:/*H2 and Carry*/
                Carry = CombineTrees(T2,Carry);
                H2->TheTrees[i] = NULL;
                break;
            case 7：/*All trees*/
                H1->TheTree[i] = Carry;
                Carry = CombineTrees(T1,T2);
                H2->TheTrees[i] = NULL;
                break;
         }
      }
    return H1;
}

二项队列的DeleteMin
ElementType
DeleteMin( BinQueue H )
{
    int i,j;
    int MinTree;   /*The tree with the minimun item*/
    BinQueue DeletedQueue;
    Position DetetedTree, OldRoot;
    ElementType MinItem;
    
    if( IsEmpty( H ) )
    {
        Error("Empty binomial queue");
        return -Infinity;
    }
    
    MinItem = Infinity;
    for( i=0; i<MaxTrees;i++)
    {
        if( H->TheTrees[i]&&H->TheTrees[i]->Element<MinItem)
        {
            /*Update minimum*/
            MinItem = H->TheTrees[i]->Element;
            MinTree = i;
        }
    }
    
    DeleteTree = H->TheTrees[MinTree];
    OldRoot
   
