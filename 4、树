树的节点声明：
typedef struct TreeNode *PtrToNode;

struct TreeNode
{
    ElementType Element;
    PtrToNode FirstChild;
    PtrToNode NextSibling;
}

先序遍历：根左右
后序遍历：左右根
中序遍历：首先遍历左子树，然后访问根结点，最后遍历右子树。

二叉树节点声明：
typedef struct TreeNode *PtrToNode;
typedef struct PtrToNode Tree;

struct TreeNode
{
    ElementType Element;
    Tree        Left;
    Tree        Right;
}

二叉查找树声明：
#ifndef _Tree_H

struct TreeNode;
typedef struct TreeNode *Position;
typedef struct TreeNode *SearchTree;

SearchTree MakeEmpty( SearchTree T)
Position Find( ElementType X, SearchTree T );
Position FindMin( SearchTree T);
Position FindMax( SearchTree T);
SearchTree Insert( ElementType X, SearchTree T );
SearchTree Delete( ElementType X, SearchTree T );
ElementType Retrieve( Position P );

#endif /*_Tree_H*/

struct TreeNode
{
    ElementType Element;
    SearchTree  Left;
    SearchTree  Right;
};

建立一棵空树的例程
SearchTree
MakeEmpty( SearchTree T )
{
    if( T!= NULL)
    {
        MakeEmpty(T->Left);
        MakeEmpty(T->Right);
        free(T);
    }
    return NULL;
}

二叉查找树的Find操作
Position
Find( ElementType X, SearchTree T)
{
    if(T == NULL )
        return NULL;
    if(x<T->Elemnt)
        return Find(X,T-Left);
    else
    if(x>T->Elemnt)
        return Find(X,T-Right);
    else
        return T;
}

对二叉查找树的FindMin的递归实现
Position
FindMin( SearchTree T)
{
    if(T == NULL )
        return NULL;
    else
    if(T->Left==NULL)
        return T;
    else
        return FindMin(T->Left);
}

对二叉查找树的FindMax非递归实现
Position
FindMax( SearchTree T)
{
    if(T!=NULL)
        while(T->Right!=NULL)
            T=T->Right;
    return T;
}

插入元素到二叉查找树的例程
SearchTree
Insert(ElementType X,Search T)
{
    if(T=NULL)
    {
        T=malloc(sizeof(struct TreeNode));
        if(T=NULL)
            FatalError("Out of space!!!");
        else
        {
            T->Element = X;
            T->Left=T->Right=NULL;
        }
    else
    if(x<T->Element)
        T->Left=Insert(X,T->Left);
    else
    if(x>T->Element)
        T->Right=Insert(X,T->Right);
        
        
     return T;
}

二叉查找树的删除例程
SearchTree
Delete( ElementType X, SearchTree T)
{
    Position TmpCell;
    
    if( T==NULL)
        Error("Element not found");
    else
    if(X<T->Element)
        T->Left=Delete(X,T->Left)
    else
    if(X>T->Element)
        T->Right=Delete(X,T->Right)
    else
    if(T->Left&&T->Right)/*左右儿子*/
    {
        TmpCell = FindMin(T->Right);
        T->Element = TmpCell->Element;
        T->Right = Delete(T->Element,T->Right);
    }
    else/*一个或者零个儿子*/
    {
        TmpCell = T;
        if(T->Left==NULL)
            T=T->Right;
        if(T->Right==NULL)
            T=T->Left;
        free(TmpCell)
    }
    
    return T;
}


AVL树的节点声明
#ifndef _AVLTree_H

struct AvlNode;
typedef struct AVLNode *Position;
typedef struct AVLNode *AVLTree;

AVLTree MakeEmpty( AVLTree T)
Position Find( ElementType X, AVLTree T );
Position FindMin( AVLTree T);
Position FindMax( AVLTree T);
AVLTree Insert( ElementType X, AVLTree T );
AVLTree Delete( ElementType X, AVLTree T );
ElementType Retrieve( Position P );

#endif /*_AVLTree_H*/

struct AVLNode
{
    ElementType Element;
    AVLTree  Left;
    AVLTree  Right;
};

计算AVL节点的高度的函数
static int
Height(Position P)
{
    if(P==NULL)
        return -1;
    else
        return P->Height;
}


