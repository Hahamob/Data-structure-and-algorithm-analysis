/*链表的类型声明*/
＃ifndef  _List_H
struct Node;
typedef struct Node *PtrToNode;
typedef PtrToNode List;
typedef PtrToNode Position;

List MakeEmpty(List L);
int IsEmpty(List L）；
int Islast(Position P,List L);
Position Find(ElementType X,List L);
void Delete(ElementType X,List L);
position FindPrevious(ElementType X,List L);
void Insert(ElementType X, List L, Position P);
void DeleteList(List L);
Position Header(List L);
Position First(List L);
Position Advance(Position P);
ElementType Retirieve(Position P);

#endif  /*_List_H*/

/*Place in the implementation file*/
struct Node
{
  ElementType Element;
  Position Next;
 };
 
 
 /*测试一个链表是否是空表*/
 int Isempty(List L)
 {
  return L->Next == NULL;
  }
  
  
  /*测试当前位置是否是链表的末尾的函数*/
  int Islast(Position P,List L)
  {
    return P->Next ==NULL;
   }
   
 /*Return Position of X in L; NULL if not found*/
 Position Find(ElementType X,List L)
 {
    Position P;
    p = L->Next;
    while(P!=NULL && P->Element !=X)
        p = p->Next;
        
    return P;
    }
    
