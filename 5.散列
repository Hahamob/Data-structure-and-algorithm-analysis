一个简单的散列函数
Index
Hash(const char *Key,int TableSize)
{
    unsigned int HashVal=0;
    while(*Key!='\0')
        HashVal+=*Key++;
        
    return HashVal % TableSize;
}


一个好的散列函数
Index
Hash(const char *Key, int TableSize)
{
    unsigned int HashVal=0;
    while(*Key!='\0')
        HashVal=(HashVal<<5)+*Key++;
    return HashVal % TableSize;
}


分离散列表的初始化例程
HashTable
InitializeTable(int TableSize)
{
    HashTable H;
    int i;
    
    if(TableSize < MinTableSize)
    {
        Error("Table size too small");
        return NULL;
    }
    
    /*Allocate table*/
    H=malloc(sizeof(struct HashTbl))
    if(H==NULL)
        FatalError("out of space!")
        
    H->TableSize=NextPrime(TableSize);
    
    /*Allocate array of lists*/
    H->TheLists=malloc(sizeof(list) *H->TableSize)
    if(H->TheLists==NULL)
        FatalError("out of space!")
    
    /*Allocate list header*/
    for(i=0;i<H->TableSize;i++)
    {
        H->TheLists[i]=malloc(sizeof(struct ListNode))
        if(H->TheLists[i]==NULL)
            FatalError("out of space!")
        else
            H->TheLists[i]->Next==NULL;
     }
     
     return H;
}


分离散列表的Find例程
Position
Find(ElementType Key,HashTable H)
{
    Position p;
    List L;
    
    L = H->TheLists[Hash(Key,H->TableSize)];
    P = L->Next;
    while(P!=NULL&&P->Element!=Key)
          P=P->Next;
    return P;
}

分离链接散列表的Insert例程
void
Insert(ElementType Key,HashTable H)
{
    Position Pos, NewCell;
    List L;
    
    Pos = Find(Key,H);
    if(Pos==NULL)
    {
        NewCell = malloc(sizeof(struct ListNode));
        if(NewCell==NULL)
            FatalError("Out of space!")
        else
        {
            L = H->TheLists[Hash(Key,H->TableSize)];
            NewCell->Next = L->Next;
            NewCell->Element = Key;
            L->Next = NewCell;
        }
      }
}





开放地址散列表的类型声明
#ifndef _HashQuad_H

typedef unsigned int Index;
typedef Index Position;

struct HashTbl;
typedef struct HashTbl *HashTable;

HashTable InitializeTable(int TableSize);
void DestoryTable(HashTable H);
Position Find(ElementType Key,HashTable H);
void Insert(ElementType Key,HashTable H);
ElementType Retrieve(Position P,HashTable H);
HashTable Rehash(HashTable H);
/*Routines such as Delete and MakeEmpty are omitted*/

#endif /*_HashQuad_H*/


/*Place in the implementation file*/
enum KindOfEntry{Legitimate,Empty,Delete};

struct HashEntry
{
        ElementType      Element;
        enum KindOfEntry Info;
};

typedef struct HashEntry Cell;

/*Cell *TheCell will be an array of*/
/*HashEntry cells,allocated later*/
struct HashTbl
{
        int TableSize;
        Cell *TheCells;
};

初始化开放定址散列表的例程
HashTable
InitializeTable(int TableSize)
{
        HashTable H;
        int i;
        
        if(TableSize < MinTableSize)
        {
                Error("Table size too small")
                return NULL;
        }
        
        /*Allocate table*/
        H = malloc(sizeof(struct HashTbl));
        if(H==NULL)
                FatalError("Out of space!!!");
                
        H->TableSize = NextPrime(TableSize);
        
        /*Allocate array of Cells*/
        H->TheCells = malloc(sizeof(Cell) * H->TableSize);
        if(H->TheCells==NULL)
                FatalError("Out of space!!!");
                
        for(i=0;i < H->TableSize;i++)
                H->TheCells[i].Info=Empty;
                
        return n;
}

使用平方探测散列表的Find例程
Position 
Find(ElementType Key,HashTable H)
{
        Position CurrentPos;
        int CollisionNum;
        
        CollisionNum = 0;
        CurrentPos = Hash(Key,H->TableSize);
        while(H->TheCell[CurrentPos].Info!=Empty && H->TheCell[CurrentPos].Elemnt!=Key)
        
        {
                CurrentPos += 2 * ++CollisionNum-1;
                if(CurrentPos>=H->TableSize)
                        CurrentPos -= H->TableSize;
        }
        return CurrentPos;
}

使用平方探测散列表的插入例程
void 
Insert(ElementType Key,HashTable H)
{
        Position Pos;
        
        Pos = Find(Key,H);
        if(H->TheCells[Pos].Info != Legitimate)
        {
                H->TheCells[Pos].Info = Legitimate;
                H->TheCells[Pos].Element = Key;
        }
}

对开放地址散列表的再散列
HashTable
Rehash(HashTable H)
{
        int i,OldSize;
        Cell *OldCells;
        
        OldCells = H->TheCells;
        OldSize  = H->TableSize;
        
        /*get a new,empty table*/
        H = InitializeTable(2 * OldSize);
        
        /*scan through old table,reinserting into new*/
        for(i=0;i < OldSize;i++)
            if(OldCell[i].Info == Legitimate)
                    Insert(OldCell[i].Elemnt,H);
                    
        free(OldCells);
        
        return H;
}
