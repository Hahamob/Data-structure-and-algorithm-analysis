插入排序的例程
void 
InsertionSort( ElementType A[ ], int N )
{
    int j, P;
    
    Element Type Tmp;
    for( P=1;P<N;P++ )
    {
        Tmp = A[P];
        for( j=P;j>0 && A[j-1] > Tmp;j--)
            A[j] = A[j-1];
        A[j] = Tmp;
    }
}

N个互异数的数组的平均逆序是N（N-1）/4

使用希尔增量的希尔排序例程
void
Shellsort( ElementType A[ ], int N )
{
    int i,j,Increment;
    ElementType Tmp;
    
    for( Increment = N/2; Increment > 0;Increment /=2 )
          for( i=Increment;i < N; i++)
          {
              Tmp = A[i];
              for( j=i; j>=Increment; j-=Increment)
                  if(Tmp<A[j-Increment)
                      A[j]=A[j-Increment];
                  else
                      break;
               A[j] = Tmp;
          }
}

堆排序
#define LeftChild(i)(2*(i)+1)

void
PercDown( ElementType A[ ], int i, int N )
{
    int Child;
    ElementType Tmp;
    
    for( Tmp = A[i];LeftChild(i)<N;i=Child )
    {
        Child = LeftChild(i);
        if( Child != N-1 && A[Child+1] > A[Child]
            Child++;
        if( Tmp < A[Child] )
            A[i] = A[Child];
        else
            break;
     }
     A[i] = Tmp;
}

void 
Heapsort( ElementType A[], int N)
{
    int i;
    
    for(i=N/2;i>=0;i--)/*BulidHeap*/
        PercDown( A, i, N);
    for(i=N-1;i>0;i--)
    {
        swap(&A[0],&A[i]);/*DeleteMax*/
        PercDown( A, 0, i);
    }
}

归并排序的例程
void
MSort( ElementType A[], ElementType TmpArray[], int Left, int Right )
{
    int Center;
    
    if( Left < Right )
    {
        Center = (Left+Right)/2;
        MSort( A, TmpArray, Left, Center );
        MSort( A, TmpArray, Center+1, Right );
        Merge( A, TmpArray, Left, Center+1, Right );
    }
 }
 
 void
 Mergesort( ElementType A[], int N )
 {
    ElementType *TmpArray;
    
    TmpArray = malloc(N * sizeof(ElementType));
    if( TmpArray != NULL )
    {
        MSort( A, TmpArray, 0, N-1 );
        free( TmpArray );
    }
    else
        FatalError("No Space for tmp array!!!");
 }
 
 merge例程
 /*Lpos = start of left half, Rpos = start of right half*/
 
 void
 Merge( ElementType A[], ElementType TmpArray[], int Lpos, int Rpos, int RightEnd )
 {
    int i,LeftEnd,NumElements,TmpPos;
    
    LeftEnd = Rpos-1;
    TmpPos = Lpos;
    NumElements = RightEnd - Lpos + 1;
    
    /*main loop*/
    while(Lpos <= LeftEnd && Rpos <= RightEnd )
        if( A[Lpos] <= A[Rpos])
            TmpArray[ TmpPos++ ] = A[ Lpos++ ];
        else
            TmpArray[ TmpPos++ ] = A[ Rpos++ ];
            
    while( Lpos <= LeftEnd ) /*copy rest of first half*/
        TmpArray[TmpPos++] = A[Lpos++];
    while( Lpos <= ReftEnd ) /*copy rest of second half*/
        TmpArray[TmpPos++] = A[Rpos++];  
        
    /*Copy TmpArray back*/
    for( i = 0; i < NumElements; i++,RightEnd-- )
        A[RightEnd] = TmpArray[RightEnd];
}
